apiVersion: batch/v1beta1
kind: CronJob
metadata:
  annotations:
  name: ecr-cred-helper
  namespace: default   
spec:
  concurrencyPolicy: Allow 
  failedJobsHistoryLimit: 1
  jobTemplate:
    metadata:
      creationTimestamp: null
    spec:
      template:
        metadata:
          creationTimestamp: null
        spec:
          containers:
          - image: impalah/k8s-cp-utilities:latest
            imagePullPolicy: IfNotPresent
            name: ecr-cred-helper
            command:
            - /bin/sh
            - -c
            - |-
              doctl auth init -t ${DO_ACCESS_TOKEN}
              doctl kubernetes cluster kubeconfig save ${K8S_CLUSTER_NAME}
              echo "DO authorization executed"
              ACCOUNT=${AWS_ACCOUNT}
              REGION=${AWS_DEFAULT_REGION}
              SECRET_NAME=${REGION}-ecr-registry
              EMAIL=${AWS_DEFAULT_MAIL}
              TOKEN=`aws ecr get-login --region ${REGION} --registry-ids ${ACCOUNT} | cut -d' ' -f6`
              echo "ENV variables setup done."
              kubectl delete secret --ignore-not-found $SECRET_NAME
              kubectl create secret docker-registry $SECRET_NAME --docker-server=https://${ACCOUNT}.dkr.ecr.${REGION}.amazonaws.com --docker-username=AWS --docker-password="${TOKEN}" --docker-email="${EMAIL}" 
              echo "Secret created by name. $SECRET_NAME"
              kubectl patch serviceaccount default -p '{"imagePullSecrets":[{"name":"'$SECRET_NAME'"}]}'
              echo "All done."
            envFrom:
              - configMapRef:
                  name: providers-credentials-config
            resources: {}
            securityContext:
              capabilities: {}
            terminationMessagePath: /dev/termination-log  
            terminationMessagePolicy: File
          dnsPolicy: Default
          hostNetwork: true
          restartPolicy: Never
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
  schedule: 0 */6 * * *  # workload | cron pattern | every 6 hours
  successfulJobsHistoryLimit: 3
  suspend: false